// generated file, do not modify!
// {{ dateTime }}

package {{ moduleName }}

import RT.*

{% for m in imports %}
import {{ m.value }}.*
{% endfor %}

{% for t in dataAndType %}
{% case t.value | constType %}
{% when "DataDef" %}
{% if t.value.constructors | nonSingular %}
sealed class {{ t.value.dataName }}()
{% endif %}
{% for c in t.value.constructors %}
{% if c.value.fields | empty %}
object {% if t.value.constructors | nonSingular %}_{% endif %}{{ c.value.name }}{% if t.value.constructors | nonSingular %} : {{ t.value.dataName }}(){% endif %}
{% else %}
data class {% if t.value.constructors | nonSingular %}_{% endif %}{{ c.value.name }}({% for f in c.value.fields %}{% if c.value.fields | hasFieldNames %}
  val {{ f.value.fieldName }} : {{ f.value.fieldType | ktType }},{% else %}
  val _{{ f.index0 }} : {{ f.value.fieldType | ktType }},{% endif %}{% endfor %}
){% if t.value.constructors | nonSingular %} : {{ t.value.dataName }}(){% endif %}
{% endif %}
{% endfor %}
{% when "TypeAlias" %}
typealias {{ t.value.aliasName }} = {{ t.value.aliasType | ktType }}
{% endcase %}

{% endfor %}